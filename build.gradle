plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.61'
    id 'org.jlleitschuh.gradle.ktlint' version '9.2.1'
    id 'jacoco'
}

allprojects {
    repositories {
        jcenter()
        mavenCentral()
        maven {
            url "http://packages.confluent.io/maven/"
        }
    }
}

subprojects {
    group = 'parts.code'

    apply plugin: 'idea'
    apply plugin: 'kotlin'
    apply plugin: 'org.jlleitschuh.gradle.ktlint'
    apply plugin: 'jacoco'

    ext {
        ratpackVersion = '1.7.6'
        kafkaVersion = '2.4.0'
        jacksonVersion = '2.10.2'
        avroVersion = '1.9.1'
        kafkaConfluentVersion = '5.4.0'
        jgivenVersion = '0.18.2'
        skepticalVersion = '0.0.1'
    }

    ext.libs = [
            kafka: [
                    "org.apache.kafka:kafka-clients:$kafkaVersion",
                    "org.apache.kafka:kafka-streams:$kafkaVersion",
                    "io.confluent:kafka-avro-serializer:$kafkaConfluentVersion",
                    "io.confluent:kafka-streams-avro-serde:$kafkaConfluentVersion"
            ]
    ]

    dependencies {
        implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
        implementation 'ch.qos.logback:logback-classic:1.2.3'
        implementation 'parts.code:money:1.0.0'
    }

    test {
        useJUnitPlatform()
        testLogging.showStandardStreams = true
        testLogging.exceptionFormat = 'full'
        testLogging.events 'passed', 'skipped', 'failed'
    }

    jacoco {
        toolVersion = '0.8.5'
    }

    jacocoTestReport {
        reports {
            xml.enabled true
            csv.enabled false
        }
    }

    test.finalizedBy jacocoTestReport

    compileKotlin {
        kotlinOptions.jvmTarget = '1.8'
    }

    compileTestKotlin {
        kotlinOptions.jvmTarget = '1.8'
    }
}

task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }

    def projects = [
            project(":balance-service"),
            project(":command-service"),
            project(":integration-tests"),
            project(":kafka-init-service"),
            project(":preferences-service")
    ]

    additionalSourceDirs.from = projects.sourceSets.main.allSource.srcDirs
    sourceDirectories.from = projects.sourceSets.main.allSource.srcDirs
    classDirectories.from = projects.sourceSets.main.output
    executionData.from = projects.jacocoTestReport.executionData.findAll { it.first().exists() }
}
