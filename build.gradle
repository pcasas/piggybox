plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.61'
    id 'org.jlleitschuh.gradle.ktlint' version '9.2.1'
    id 'jacoco'
}

ext {
    jacksonVersion = '2.10.2'
    ratpackVersion = '1.7.6'
    kafkaVersion = '2.4.0'
    confluentVersion = '5.4.0'
    avroVersion = '1.9.1'
    logbackVersion = '1.2.3'
    moneyVersion = '1.0.0'
    jacocoVersion = '0.8.5'
    jvmVersion = '1.8'

    libs = [
            jackson: ["com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVersion"],
            ratpack: ["io.ratpack:ratpack-guice:$ratpackVersion"],
            kafka  : ["org.apache.kafka:kafka-clients:$kafkaVersion",
                      "org.apache.kafka:kafka-streams:$kafkaVersion",
                      "io.confluent:kafka-avro-serializer:$confluentVersion",
                      "io.confluent:kafka-streams-avro-serde:$confluentVersion"]
    ]
}

allprojects {
    repositories {
        jcenter()
        mavenCentral()
        maven { url "https://packages.confluent.io/maven/" }
    }
}

subprojects {
    group = 'parts.code'

    apply plugin: 'idea'
    apply plugin: 'kotlin'
    apply plugin: 'org.jlleitschuh.gradle.ktlint'
    apply plugin: 'jacoco'

    dependencies {
        implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
        implementation "ch.qos.logback:logback-classic:$logbackVersion"
        implementation "parts.code:money:$moneyVersion"
    }

    test {
        useJUnitPlatform()
        testLogging.showStandardStreams = true
        testLogging.exceptionFormat = 'full'
        testLogging.events 'passed', 'skipped', 'failed'
    }

    jacoco {
        toolVersion = jacocoVersion
    }

    jacocoTestReport {
        reports {
            html.enabled true
            xml.enabled true
            csv.enabled false
        }
    }

    test.finalizedBy jacocoTestReport

    compileKotlin { kotlinOptions.jvmTarget = jvmVersion }
    compileTestKotlin { kotlinOptions.jvmTarget = jvmVersion }
}

task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }

    def projects = [
            project(":balance-service"),
            project(":command-service"),
            project(":integration-tests"),
            project(":preferences-service")
    ]

    additionalSourceDirs.from = projects.sourceSets.main.allSource.srcDirs
    sourceDirectories.from = projects.sourceSets.main.allSource.srcDirs
    classDirectories.from = projects.sourceSets.main.output
    executionData.from = projects.jacocoTestReport.executionData.findAll { it.first().exists() }
}
